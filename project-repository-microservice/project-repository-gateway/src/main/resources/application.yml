server:
  port: 9001
  servlet:
    context-path: /repository

spring:
  application:
    name: project-repository-gateway
  cloud:
    nacos:
      discovery:
        enabled: true # 如果不想使用 Nacos 进行服务注册和发现, 设置为 false 即可
        server-addr: ${nacosEndpoint} # Nacos 服务器地址
        namespace: ${projectNamespace}
#        metadata:
#          management:
#            context-path: ${server.servlet.context-path}/actuator
    sentinel:
      transport:
        port: 8720
        dashboard: 127.0.0.1:7777
      eager: true
      datasource:
    # 通过本地文件方式存储配置
        # 基于服务级别的配置
        ds1.file:
          file: classpath:gateway-flow-rule-sentinel.json
          # gw-flow 代表服务级别的限流
          ruleType: gw-flow
        # 细粒度对指定 api 进行配置
        ds2.file:
          file: classpath:gateway-flow-rule-api-sentinel.json
          # gw-api-group 代表 API 分组
          ruleType: gw-api-group
    # 集成 Nacos 存储配置
        # 基于服务级别的配置
        ds1:
          nacos:
            server-addr: ${spring.cloud.nacos.discovery.server-addr}
            namespace: ${spring.cloud.nacos.discovery.namespace}
            # 测试时, 看看 Nacos 中修改是否能让 dashboard 生效, 就把第二个 count 也修改为 3
            data-id: gateway-flow-rule-sentinel #resource文件夹下的文件名
            group-id: DEFAULT_GROUP
            data-type: json
            rule-type: gw-flow
        # 细粒度对指定 api 进行配置
        ds2:
          nacos:
            server-addr: ${spring.cloud.nacos.discovery.server-addr}
            namespace: ${spring.cloud.nacos.discovery.namespace}
            data-id: gateway-flow-rule-api-sentinel #resource文件夹下的文件名
            group-id: DEFAULT_GROUP
            data-type: json
            rule-type: gw-api-group

    # 静态路由
  #    gateway:
  #      routes:
  #        - id: path_route # 路由的ID
  #          uri: 127.0.0.1:8080/user/{id} # 匹配后路由地址
  #          predicates: # 断言, 路径相匹配的进行路由
  #            - Path=/user/{id}
  kafka:
    bootstrap-servers: 127.0.0.1:9092
    producer:
      retries: 3
    consumer:
      auto-offset-reset: latest
  zipkin:
    sender:
      type: kafka # 默认是 web
    base-url: http://localhost:9411/

# 这个地方独立配置, 是网关的数据, 代码 GatewayConfig.java 中读取被监听
nacos:
  gateway:
    route:
      config:
        data-id: project-repository-gateway-router
        group: project-repository

# 暴露端点
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always
